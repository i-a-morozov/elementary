{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "556562f3-8ece-4517-8c93-ee5e2fc29131",
   "metadata": {},
   "source": [
    "# Example-10: Alignment errors (straight layout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75d281f7-4912-4cd5-829f-334166ffb0aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example alignment errors for straight layout are illustrated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ca22ec52-5452-46f4-a543-09098e46ddc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import jax\n",
    "from jax import jit\n",
    "from jax import jacrev\n",
    "\n",
    "from elementary.util import ptc\n",
    "from elementary.util import beta\n",
    "from elementary.quadrupole import quadrupole_factory\n",
    "from elementary.alignment import alignment_factory\n",
    "\n",
    "jax.numpy.set_printoptions(linewidth=256, precision=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c01e714-436b-4b44-9fe0-48d182ce8266",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set data type\n",
    "\n",
    "jax.config.update(\"jax_enable_x64\", True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5df03158-1031-4e4f-b353-3648710e1f86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set device\n",
    "\n",
    "device, *_ = jax.devices('cpu')\n",
    "jax.config.update('jax_default_device', device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3075de9d-bf80-426d-bfb1-4daa9d8e7001",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set initial condition\n",
    "\n",
    "(q_x, q_y, q_s) = qs = jax.numpy.array([-0.01, 0.005, 0.001])\n",
    "(p_x, p_y, p_s) = ps = jax.numpy.array([0.001, 0.001, -0.0001])\n",
    "x = jax.numpy.hstack([qs, ps])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00be37d7-7c32-4120-9e1b-d400429a7282",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define generic quadrupole element\n",
    "\n",
    "gamma = 10**3\n",
    "length = 0.2\n",
    "\n",
    "body = quadrupole_factory(beta=beta(gamma), gamma=gamma, order=2**1, iterations=150, settings=dict(ns=2**2))\n",
    "xyz_entrance, xyz_exit = alignment_factory(beta=beta(gamma), gamma=gamma, flag=False)\n",
    "\n",
    "@jit\n",
    "def element(x, length, kn, ks, dx, dy, dz, wx, wy, wz):\n",
    "    x = xyz_entrance(x, dx, dy, dz, wx, wy, wz)\n",
    "    x = body(x, length, kn, ks)\n",
    "    x = xyz_exit(x, dx, dy, dz, wx, wy, wz, length)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e075aaf-9f55-4542-95d7-861742d76755",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set alignment errors\n",
    "\n",
    "dx, dy, dz = jax.numpy.array([0.05, -0.02, 0.05])\n",
    "wx, wy, wz = jax.numpy.array([0.005, -0.005, 0.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "400d5958-531e-43c0-9c84-47f805a62262",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-4.532564066215e-02 -5.683873885073e-02 -2.649160041101e-03 -1.148938967200e-01 -1.263031959206e-01 -1.000000000000e-04]\n",
      "[-4.532564066213e-02 -5.683873885073e-02 -2.649160041114e-03 -1.148938967200e-01 -1.263031959206e-01 -1.000000000000e-04]\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Compare with PTC\n",
    "\n",
    "length = jax.numpy.float64(1.0)\n",
    "kn = jax.numpy.float64(-2.0)\n",
    "ks = jax.numpy.float64(+1.5)\n",
    "\n",
    "print(res := element(x, length, kn, ks, dx, dy, dz, wx, wy, wz))\n",
    "print(ref := ptc(x, 'quadrupole', {'l': float(length), 'k1': float(kn), 'k1s': float(ks)}, gamma=gamma, tx=float(dx), ty=float(dy), tz=float(dz), rx=float(wx), ry=float(wy), rz=float(wz)))\n",
    "print(jax.numpy.allclose(res, ref))"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
