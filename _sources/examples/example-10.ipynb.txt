{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "556562f3-8ece-4517-8c93-ee5e2fc29131",
   "metadata": {},
   "source": [
    "# Example-11: Alignment errors (curved layout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "466e35f6-a112-4eac-849e-5d9ee78853bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this example alignment errors for curved layout are illustrated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b4ebaf17-6336-4a42-83c3-2481ad4f8fca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import jax\n",
    "from jax import jit\n",
    "from jax import jacrev\n",
    "\n",
    "from elementary.util import ptc\n",
    "from elementary.util import beta\n",
    "from elementary.dipole import dipole_factory\n",
    "from elementary.alignment import alignment_factory\n",
    "\n",
    "jax.numpy.set_printoptions(linewidth=256, precision=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7abc25a0-a451-4a23-950a-46652803cc6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set data type\n",
    "\n",
    "jax.config.update(\"jax_enable_x64\", True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d2f2c6b-59df-400e-8f6f-e53160b88b98",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set device\n",
    "\n",
    "device, *_ = jax.devices('cpu')\n",
    "jax.config.update('jax_default_device', device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95fd2904-ab72-43a3-bb39-77987c7e306f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set initial condition\n",
    "\n",
    "(q_x, q_y, q_s) = qs = jax.numpy.array([-0.01, 0.005, 0.001])\n",
    "(p_x, p_y, p_s) = ps = jax.numpy.array([0.001, 0.001, -0.0001])\n",
    "x = jax.numpy.hstack([qs, ps])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "438a5685-555b-429e-8281-5f0890cc3add",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define generic dipole element\n",
    "\n",
    "gamma = 10**3\n",
    "\n",
    "length = jax.numpy.float64(1.0)\n",
    "angle = jax.numpy.float64(0.05)\n",
    "\n",
    "kq_n = jax.numpy.float64(-2.0)\n",
    "kq_s = jax.numpy.float64(+1.5)\n",
    "ks_n = jax.numpy.float64(-50.0)\n",
    "ks_s = jax.numpy.float64(+75.0)\n",
    "ko_n = jax.numpy.float64(-100.0)\n",
    "ko_s = jax.numpy.float64(+500.0)\n",
    "\n",
    "body = dipole_factory(multipole=True, beta=beta(gamma), gamma=gamma, order=2**1, iterations=200, settings=dict(ns=2**1))\n",
    "xyz_entrance, xyz_exit = alignment_factory(beta=beta(gamma), gamma=gamma, flag=True)\n",
    "\n",
    "@jit\n",
    "def element(x, length, angle, kq_n, kq_s, ks_n, ks_s, ko_n, ko_s, dx, dy, dz, wx, wy, wz):\n",
    "    x = xyz_entrance(x, dx, dy, dz, wx, wy, wz)\n",
    "    x = body(x, length, angle, kq_n, kq_s, ks_n, ks_s, ko_n, ko_s)\n",
    "    x = xyz_exit(x, dx, dy, dz, wx, wy, wz, length, angle)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57a039aa-28a7-40c3-bd3b-dcf7245caf91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set alignment errors\n",
    "\n",
    "dx, dy, dz = jax.numpy.array([0.05*1, -0.02*1, 0.05*1])\n",
    "wx, wy, wz = jax.numpy.array([0.005*1, -0.005*1, 0.1*1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1fa5ad36-3177-441d-8b2f-3a4361f2dcac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-6.489404978724e-02  2.078529965698e-02 -2.211225001039e-04 -1.450307157165e-01  8.291770017977e-02 -1.000000000000e-04]\n",
      "[-6.489404978720e-02  2.078529965695e-02 -2.211225001033e-04 -1.450307157164e-01  8.291770017969e-02 -1.000000000000e-04]\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# Compare with PTC\n",
    "\n",
    "print(res := element(x, length, angle, kq_n, kq_s, ks_n, ks_s, ko_n, ko_s, dx, dy, dz, wx, wy, wz))\n",
    "print(ref := ptc(x, 'sbend', {'l': float(length), 'angle': float(angle), 'knl': f'{{0.0,{float(kq_n*length)}, {float(ks_n*length)}, {float(ko_n*length)}}}', 'ksl': f'{{0.0,{float(kq_s*length)}, {float(ks_s*length)}, {float(ko_s*length)}}}', 'kill_ent_fringe': 'true', 'kill_exi_fringe': 'true'}, gamma=gamma, tx=float(dx), ty=float(dy), tz=float(dz), rx=float(wx), ry=float(wy), rz=float(wz)))\n",
    "print(jax.numpy.allclose(res, ref))"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "myt0_gMIOq7b",
    "5d97819c"
   ],
   "name": "03_frequency.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
